image: alpine:latest

stages:
  - build
  - upload
  - deploy

Deploy Firebase Security Rules:
  image: itachi1706/docker-firebase-cli:latest
  stage: deploy
  before_script:
    - cd firebase
  script:
    - firebase --token $FIREBASE_TOKEN deploy --only storage
    - firebase --token $FIREBASE_TOKEN deploy --only firestore:rules
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - firebase/**/*
      when: always
    - when: never
  needs: []

Update Firestore Public Data:
  image: node:alpine
  stage: deploy
  before_script:
    - mkdir importer/import
    - cp public/data/*.json importer/import
    - cat $FIREBASE_SERVICE_ACCOUNT > importer/serviceAccountKey.json
    - cd importer
    - npm i
  script: npm start
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - public/data/**/*
      when: always
    - when: never
  needs: []

Generate Flutter App:
  image: itachi1706/flutter-alpine-android:beta
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    ANDROID_HOME: "/usr/local/android-sdk"
    APP_BUILD_VER: dogfood
    APP_TYPE: Android
  before_script:
    - flutter doctor -v
    - echo $FLUTTER_KEYSTORE | base64 -d > android/app/flutter.jks
    - cat $KEY_PROPERTIES > android/key.properties
    - cat $GOOGLE_SVC_ANDROID > android/app/google-services.json
    - cat $GOOGLE_SVC_IOS > ios/Runner/GoogleService-Info.plist
    - mkdir release
    - export GIT_COMMIT_COUNT="$(git rev-list --count HEAD)"
    - echo $GIT_COMMIT_COUNT
    - echo $CI_COMMIT_SHORT_SHA
    - chmod +x ./ciscripts/get_version.sh
    - ./ciscripts/get_version.sh
  script:
    - flutter build apk --target-platform android-arm,android-arm64,android-x64 --split-per-abi
    - mv ./build/app/outputs/apk/release/*.apk ./release
    - flutter build apk
  after_script:
    - cp build/app/outputs/apk/release/app-release.apk ./release
    - cp build/app/outputs/apk/release/app-release.apk ./app-fatapk.apk
  artifacts:
    paths:
      - release/
      - app-fatapk.apk
    expire_in: 14 days

Deploy Dogfood to Firebase:
  image: itachi1706/docker-firebase-cli:latest
  stage: deploy
  variables:
    APP_TYPE: dogfood
  before_script:
    - echo $CI_COMMIT_MESSAGE > release-dogfood.txt
    - builddate="$(date +"%A, %d %B %Y %T %Z")"
    - printf "\nRelease Notes\n" >> release-dogfood.txt
    - cat LATEST >> release-dogfood.txt
    - printf "\n\nAPK Built on $builddate on branch $CI_COMMIT_REF_NAME ($CI_COMMIT_SHORT_SHA), type $APP_TYPE" >> release-dogfood.txt
    - cat release-dogfood.txt
    - cp ./release/app-arm64-v8a-release.apk app.apk
  script: firebase --token $FIREBASE_TOKEN appdistribution:distribute app.apk --app $FIREBASE_APPID --groups "dogfooder" --release-notes-file "release-dogfood.txt"
  dependencies:
    - Generate Flutter App
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
      changes:
        - android/**/*
        - assets/**/*
        - VERSION
        - fonts/**/*
        - integration_test/**/*
        - ios/**/*
        - lib/**/*
        - data/**/*
        - web/**/*
        - pubspec.*
      when: always
    - when: never

# Releases
Generate Release Flutter App:
  image: itachi1706/flutter-alpine-android:beta
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    ANDROID_HOME: "/usr/local/android-sdk"
    APP_BUILD_VER: beta
    APP_TYPE: Android
  before_script:
    - flutter doctor -v
    - echo $FLUTTER_RELEASE_KEYSTORE | base64 -d > android/app/flutter.jks
    - cat $RELEASE_KEY_PROPERTIES > android/key.properties
    - cat $GOOGLE_SVC_ANDROID > android/app/google-services.json
    - cat $GOOGLE_SVC_IOS > ios/Runner/GoogleService-Info.plist
    - mkdir release
    - export GIT_COMMIT_COUNT="$(git rev-list --count HEAD)"
    - echo $GIT_COMMIT_COUNT
    - echo $CI_COMMIT_SHORT_SHA
    - chmod +x ./ciscripts/get_version.sh
    - ./ciscripts/get_version.sh
  script:
    - flutter build apk --target-platform android-arm,android-arm64,android-x64 --split-per-abi
    - mv ./build/app/outputs/apk/release/*.apk ./release
    - flutter build apk
  after_script:
    - cp build/app/outputs/apk/release/app-release.apk ./release
    - cp build/app/outputs/apk/release/app-release.apk ./app-fatapk.apk
  artifacts:
    paths:
      - release/
      - app-fatapk.apk
    expire_in: 14 days
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: never

Deploy Beta to Firebase:
  image: itachi1706/docker-firebase-cli:latest
  stage: deploy
  variables:
    APP_TYPE: beta
  before_script:
    - echo $CI_COMMIT_MESSAGE > release-beta.txt
    - builddate="$(date +"%A, %d %B %Y %T %Z")"
    - printf "\nRelease Notes\n" >> release-beta.txt
    - cat LATEST >> release-beta.txt
    - printf "\n\nAPK Built on $builddate on branch $CI_COMMIT_REF_NAME ($CI_COMMIT_SHORT_SHA), type $APP_TYPE" >> release-beta.txt
    - cat release-beta.txt
    - cp ./release/app-arm64-v8a-release.apk app.apk
  script: firebase --token $FIREBASE_TOKEN appdistribution:distribute app.apk --app $FIREBASE_APPID --groups "beta" --release-notes-file "release-beta.txt"
  dependencies:
    - Generate Release Flutter App
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: never

Build Web App:
  image: itachi1706/flutter-alpine-android:beta-web
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    APP_BUILD_VER: web
    APP_TYPE: Web
  before_script:
    - flutter doctor -v
    - export GIT_COMMIT_COUNT="$(git rev-list --count HEAD)"
    - echo $GIT_COMMIT_COUNT
    - echo $CI_COMMIT_SHORT_SHA
    - chmod +x ./ciscripts/get_version.sh
    - ./ciscripts/get_version.sh
  script: flutter build web
  after_script:
    - apk add --no-cache zip
    - mkdir -p firebase/public
    - mv build/web/* ./firebase/public
    - zip -r webapp.zip ./firebase/public
  artifacts:
    paths:
      - firebase/
      - webapp.zip

Deploy to Firebase Hosting Staging:
  image: itachi1706/docker-firebase-cli:latest
  stage: deploy
  before_script:
    - cd firebase
  script: firebase --token $FIREBASE_TOKEN hosting:channel:deploy staging
  dependencies:
    - Build Web App
  artifacts:
    paths:
      - firebase/
  needs: ["Build Web App"]
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
      when: always
    - when: never

Deploy to Firebase Hosting Dev:
  image: itachi1706/docker-firebase-cli:latest
  stage: deploy
  before_script:
    - cd firebase
  script: firebase --token $FIREBASE_TOKEN hosting:channel:deploy dev --expires 1d
  dependencies:
    - Build Web App
  artifacts:
    paths:
      - firebase/
  needs: ["Build Web App"]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'
      when: on_success
    - when: never

Deploy to Firebase Hosting Prod:
  image: itachi1706/docker-firebase-cli:latest
  stage: deploy
  before_script:
    - cd firebase
  script: firebase --token $FIREBASE_TOKEN deploy --only hosting
  dependencies:
    - Build Web App
  artifacts:
    paths:
      - firebase/
  needs: ["Build Web App"]
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: never
  environment:
    name: Production
    url: https://gi-weekly-material-tracker.web.app/


variables:
  APK_BINARY: "gi-material-tracker-arm64-"
  APK_ARM32_BINARY: "gi-material-tracker-arm-"
  APK_MULTI_BINARY: "gi-material-tracker-multiarch-"
  APK_x64_BINARY: "gi-material-tracker-x64-"
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/releases/"

Upload Artifact:
  image: curlimages/curl:latest
  stage: upload
  variables:
    APP_TYPE: beta
  dependencies:
    - Generate Flutter App
  before_script:
    - echo "Deploying tagged version of app"
    - echo $CI_COMMIT_MESSAGE > release-beta.txt
    - builddate="$(date +"%A, %d %B %Y %T %Z")"
    - printf "\nRelease Notes\n" >> release-beta.txt
    - cat LATEST >> release-beta.txt
    - printf "\n\nAPK Built on $builddate on branch $CI_COMMIT_REF_NAME ($CI_COMMIT_SHORT_SHA), type $APP_TYPE" >> release-beta.txt
    - cat release-beta.txt
    - cp ./release/app-arm64-v8a-release.apk app_arm64.apk
    - cp ./release/app-x86_64-release.apk app_x64.apk
    - cp ./release/app-armeabi-v7a-release.apk app_arm.apk
    - APP_VERSION=$(cat ./VERSION)
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file app_arm64.apk ${PACKAGE_REGISTRY_URL}${APP_VERSION}/${APK_BINARY}${APP_VERSION}
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file app_x64.apk ${PACKAGE_REGISTRY_URL}${APP_VERSION}/${APK_x64_BINARY}${APP_VERSION}
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file app_arm.apk ${PACKAGE_REGISTRY_URL}${APP_VERSION}/${APK_ARM32_BINARY}${APP_VERSION}
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file app-fatapk.apk ${PACKAGE_REGISTRY_URL}${APP_VERSION}/${APK_MULTI_BINARY}${APP_VERSION}
  rules:
    - if: $CI_COMMIT_TAG
  artifacts:
    paths:
      - release-beta.txt

Deploy Artifact:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: deploy
  dependencies:
    - Generate Flutter App
    - Upload Artifact
  script:
    - APP_VERSION=$(cat ./VERSION)
    - echo "Releasing tagged release"
    - release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG --description release-beta.txt --ref "$CI_COMMIT_TAG" \
      --assets-link='{"name":"${APK_BINARY}${APP_VERSION}.apk","type":"other","url":"${PACKAGE_REGISTRY_URL}${APP_VERSION}/${APK_BINARY}${APP_VERSION}"}'
  rules:
    - if: $CI_COMMIT_TAG
